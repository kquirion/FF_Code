import time
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
from matplotlib import cm
from matplotlib.ticker import LinearLocator, FormatStrFormatter
import pandas
from pandas import DataFrame
from scipy.optimize import curve_fit
from XSFunctions import *
from numpy import array,inf,where,linspace,power,diag,broadcast_to,swapaxes,set_printoptions,sqrt,meshgrid,nanmax,nanmin,shape,amax
from math import pi
from scipy.interpolate import interp1d

start_time = time.time()

set_printoptions(threshold=inf) 
    

    
m_N = (0.9389)                                            # mass of the Nucleon
m_mu = (0.1057)                                           # mass of Muon GeV
p_F = (0.220)                                             # Fermi Momentum
A = 12                                                    # number of nucleons

## create the 2d array of miniBooNE data for the double fifferential cross section ##
Miniboone_XS = array([[289.2,348.7,418.3,497.6,600.2,692.3,778.1,557.5,891.8,919.3,1003.0,1007.0,992.3,910.2,871.9,765.6,681.9,553.6,401.9,190.0],
    [15.18,25.82,44.84,85.80,135.2,202.2,292.1,401.6,503.3,686.6,813.1,970.2,1148.0,1157.0,1279.0,1233.0,1222.0,981.1,780.6,326.5],
    [0.0,0.0,0.0,0.164,3.624,17.42,33.69,79.10,134.7,272.3,404.9,547.9,850.0,1054.0,1301.0,1495.0,1546.0,1501.0,1258.0,539.2],
    [0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.947,10.92,40.63,92.93,201.5,394.4,628.8,989.9,1289.0,1738.0,1884.0,1714.0,901.8],
    [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.071,2.176,11.63,36.51,105.0,231.0,469.1,872.2,1365.0,1847.0,2084.0,1288.0],
    [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.844,16.96,57.95,147.4,392.3,909.6,1629.0,2100.0,1633.0],
    [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,10.93,10.69,45.02,157.5,526.7,1203.0,2035.0,1857.0],
    [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,12.44,49.23,222.8,723.8,1620.0,1874.0],
    [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.012,9.241,81.65,359.8,1118.0,1803.0],
    [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.229,35.61,156.2,783.6,1636.0],
    [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,4.162,11.36,66.90,451.9,1354.0],
    [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.131,26.87,239.4,1047.0],
    [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.527,116.4,794.0],
    [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,19.50,73.07,687.9],
    [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,41.67,494.3],
    [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,36.55,372.5],
    [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,278.3],
    [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,227.4]])*10**(-41)
    
    
    
Miniboone_Error = array([
    [349.8,339.7,408.8,450.2,520.8,596.9,698.0,922.7,917.7,980.4,1090.,1351.,1293.,1267.,1477.,1380.,1435.,1134.,905.0,684.3],
    [63.32,107.6,184.4,236.6,360.7,482.6,553.3,586.4,746.9,783.6,1078.,1246.,1105.,1154.,1273.,1372.,1455.,1557.,1352.,1071.],
    [0.,0.,0.,31.22,34.63,57.73,135.3,215.6,337.5,515.7,695.5,1048.,1041.,1155.,1365.,1434.,1581.,1781.,1754.,1778.],
    [0.,0.,0.,0.,0.,0.,0.,55.88,50.92,114.6,238.2,415.1,742.5,965.3,1369.,1370.,1648.,1845.,2009.,1664.],
    [0.,0.,0.,0.,0.,0.,0.,0.,3.422,20.92,45.96,114.3,250.6,574.7,1021.,1201.,1791.,1769.,2222.,1883.],
    [0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,41.02,77.66,149.2,475.5,870.2,1513.,1823.,2334.,2193.],
    [0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,110.3,53.26,161.6,432.3,1068.,1873.,2711.,2558.],
    [0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,55.58,162.2,598.2,1464.,2870.,3037.],
    [0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,16.32,71.88,267.2,963.8,2454.,3390.],
    [0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,49.10,155.1,601.6,1880.,3320.],
    [0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,54.01,69.28,339.6,1391.,3037.],
    [0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,89.01,184.1,1036.,3110.],
    [0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,170.1,758.7,2942.],
    [0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,230.6,544.3,2424.],
    [0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,505.5,2586.],
    [0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,359.6,2653.],
    [0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,3254.],
    [0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,3838.]])*10**(-42)
                        
Miniboone_Error = where(Miniboone_Error == 0, inf, Miniboone_Error)

A_Miniboone_XS = array([
    [0.,0.,0.,0.,18.87,22.19,20.34,25.86,45.94,68.75,77.92,93.62,138.7,162.3,207.5,264.8,281.4,302.3,319.4,272.2],
    [0.,0.,0.,0.,0.,0.,0.,0.,11.17,17.58,41.26,48.77,78.16,129.6,195.0,274.1,328.1,404.9,474.1,419.9],
    [0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,7.966,16.22,33.78,85.33,133.9,220.6,338.7,509.2,662.8,641.2],
    [0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,10.84,34.71,80.43,161.9,295.0,490.4,773.1,838.5],
    [0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,8.059,30.57,97.88,207.3,421.7,795.7,981.3],
    [0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,39.25,116.4,320.4,702.5,1083.],
    [0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,56.66,210.7,616.6,1105.],
    [0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,17.61,121.1,471.3,1065.],
    [0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,54.78,346.2,1002.],
    [0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,211.1,880.9],
    [0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,111.7,720.6],
    [0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,79.70,600.9],
    [0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,491.0],
    [0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,370.1],
    [0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,279.2],
    [0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.],
    [0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.]])*10**(-41)

## Create an array of the neutrino flux ##    
Flux = array([45.4,171,222,267,332,364,389,
        409,432,448,456,458,455,451,443,
        431,416,398,379,358,335,312,288,
        264,239,214,190,167,146,126,108,
        92,78,65.7,55.2,46.2,38.6,32.3,
        27.1,22.8,19.2,16.3,13.9,11.9,
        10.3,8.96,7.87,7,6.3,5.73,5.23,
        4.82,4.55,4.22,3.99,3.84,3.63,
        3.45,3.33,3.20])*10**(-12)   
        
######################################
## make arrays for indep. variables ##
######################################
T_mu_1d = linspace(0.25,1.95,18,endpoint=True) 
cos_mu_1d = linspace(-.95,.95,20,endpoint=True) 
E_nu_1d = linspace(0.05, (len(Flux))/20.0,len(Flux),endpoint=True) 

T_mu,cos_mu,E_nu = meshgrid(T_mu_1d,cos_mu_1d,E_nu_1d,indexing='ij')


#P_mu = sqrt(sq(T_mu+m_mu) - sq(m_mu))
#p_T = sqrt(1.-sq(cos_mu))/P_mu
#p_P = cos_mu/P_mu

#print nanmin(p_T),nanmax(p_T)
#print nanmin(p_P),nanmax(p_P) 

######################################################
## make double diff from fit to total cross section ##  
######################################################
M_A = 1.35
if M_A == 1.35:
    col = 'red'
else:
    col = 'green'

double_diff = make_double_diff_miniboone((T_mu,cos_mu,E_nu,1),M_A)    
length  =  len(Miniboone_XS.ravel())

chi_sq,tot_chi_sq =  calc_chi_squared(double_diff, Miniboone_XS, Miniboone_Error)
print ('chi^2 =  %s'  %  round_sig(tot_chi_sq/length))      

## Create the plot for the double differential cross section ##    
figax1 = plt.figure()

ax1 = figax1.gca(projection='3d')  
ax1.set_ylabel(r"$T _ {\mu} (GeV)$")
ax1.set_xlabel(r'$cos\theta_{\mu}$ (GeV)')
ax1.set_zlabel(r"$\frac{d\sigma}{dT_{\mu} \, d\cos\theta_{\mu}} $")
ax1.set_title(r'Double Differential Cross Section $ (cm^2/GeV) $')
ax1.set_xlim(-1.,1.)
ax1.set_ylim(0.2,2.0)



cos_mu = linspace(-.95,.95,20,endpoint=True)
T_mu = linspace(0.25,1.95,18,endpoint=True)

T_mu_2D,cos_mu_2D = meshgrid(T_mu,cos_mu,indexing='ij')


#popt,pcov = curve_fit(make_double_diff,(T_mu,cos_mu), Miniboone_XS.ravel(), bounds=([0.,0.],[inf,inf]),sigma=Miniboone_Error.ravel(),absolute_sigma=True)
#print(popt)
#print(pcov)
#perr = sqrt(diag(pcov))
#print(perr)
#double_diff_fit = make_double_diff((T_mu,cos_mu),popt[0],popt[1])
#double_diff_fit = make2d(T_mu,cos_mu,double_diff_fit)
#xi_sq_ind,xi_sq = calc_xi_squared(double_diff_fit,Miniboone_XS,Miniboone_Error)
#chi_sq_ind2,chi_sq2 = calc_chi_squared(double_diff,Miniboone_XS,Miniboone_Error)

#print (chi_sq/(18.*20.-2.))
#print (chi_sq2/(18.*20.-2.))



x,y = meshgrid(T_mu,-cos_mu,indexing='ij')

#surf = ax1.scatter(y,x,double_diff*1.08,color=col,marker='s',label='M_A = %s GeV' % M_A,depthshade=False)
#data = ax1.scatter(y,x,Miniboone_XS,color='black',marker='s',label='MiniBooNE Neutrino Data',depthshade=False)
 
## Plot the Cross Section ##
for i in range(len(T_mu_1d)-1):
    for j in range(len(cos_mu_1d)-1):        
        xs = -cos_mu_1d[j]
        ys = T_mu_1d[i]
        #zs = double_diff_fit[i][j]
        zs2 = Miniboone_XS[i][j] 
        zs3 = double_diff[i][j]*1.08           
        #ax1.scatter(ys,xs,zs,color='green',marker='s')
        
        ax1.scatter(xs,ys,zs3,color=col,marker='s')
        ax1.scatter(xs,ys,zs2,color='black',marker='s')
         
ax1.legend(('RFG Model: M_A = %s GeV' % M_A,'MiniBooNE Neutrino Data'),loc=(0.,0.78))

figax1.savefig("Desktop/Research/Axial FF/Plots/Miniboone_DDXS_MA%sGeV.pdf" % M_A )

    
g=open("Desktop/Miniboone_ddxc.txt","w+") 
g.write("cos   T_mu   ddxs_RFG    MiniBooNE   \n")
for i in range(len(T_mu)):
    for j in range(len(cos_mu)):
        g.write( "%s    %s    %s    %s   \n" % ((cos_mu_2D[i][j]), (T_mu_2D[i][j]), double_diff[i][j],Miniboone_XS[i][j]))
g.close()

#plt.grid()
plt.show()
