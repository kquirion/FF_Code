#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed Jun 10 21:08:58 2020

data file

@author: kevinquirion
"""
import numpy as np 


## list of constants ##
mMu = .1057                     ## mass of muon
angleCut = 20                   ## minerva angle cut
mN = 0.9389                     ## mass of nucleon
pF = 0.22                       ## fermi momentum for RFG
eB = 0.034                      ## binding energy for rfg
muP = 2.793                     ## proton magnetic moment
muN = -1.913                    ## neutron magnetic moment
gA = -1.2723                    ## F_A(q^2 = 0)
mPi = 0.1396                    ## mass of the pion
mRho = 0.775                    ## mass of rho meson
Vud = 0.9742                    ## Mixing element for up and down quarks
GeVToCm = 5.06773076*10**(13)   ## Conversion factor for GeV to cm
GF = 1.166*10**(-5)             ## Fermi Constant

EnuFluxMb = np.linspace(0.05, (60)/20.0,60,endpoint=True)

FluxMv = np.array([2.57,6.53,17.,25.1,33.1,40.7,42.8,34.2,20.4,11.1,6.79,4.87,3.95,3.34,2.91,2.55,2.29,2.05,1.85,1.7,1.54,1.41,1.28,1.18,1.07,
        .989,.906,.842,.761,.695,.619,.579,.532,.476,.44,.403,.371,.34,.317,.291])*3.34*10**(14)
FluxMb = np.array([45.4,171,222,267,332,364,389,409,432,448,456,458,455,451,443,
        431,416,398,379,358,335,312,288,264,239,214,190,167,146,126,108,
        92,78,65.7,55.2,46.2,38.6,32.3,27.1,22.8,19.2,16.3,13.9,11.9,
        10.3,8.96,7.87,7,6.3,5.73,5.23,4.82,4.55,4.22,3.99,3.84,3.63,
        3.45,3.33,3.20])*10**(-12)

pT1DLow = np.array([0.,.075,.15,.25,.325,.4,.475,.55,.7,.85,1.,1.25])
pP1DLow = np.array([1.5,2.,2.5,3.,3.5,4.,4.5,5.,6.,8.,10.,15.])

pT1DHigh = np.array([.075,.15,.25,.325,.4,.475,.55,.7,.85,1.,1.25,1.5])
pP1DHigh = np.array([2.,2.5,3.,3.5,4.,4.5,5.,6.,8.,10.,15.,20.])

pT1D = (pT1DLow + pT1DHigh)/2.
pP1D = (pP1DLow + pP1DHigh)/2.

Tmu1DMb = np.linspace(0.25,1.95,18,endpoint=True)
Cosmu1DMb = np.linspace(-.95,.95,20,endpoint=True)
Enu1DMb = np.linspace(0.05, (len(FluxMb))/20.0,len(FluxMb),endpoint=True)

MinibooneXData = np.array([.425,.475,.525,.575,.625,.675,.725,.775,.85,.95,1.05,1.2,1.4,1.75])
MinibooneXS = np.array([7.985,8.261,8.809,9.530,10.13,10.71,11.11,11.55,12.02,12.30,12.58,12.58,12.78,12.36])*10**(-39)
MinibooneError = np.array([1.997,1.532,1.330,1.209,1.24,1.089,1.065,1.078,1.129,1.217,1.359,1.662,2.116,2.613])*10**(-39)

MinibooneSxsXData = np.array([.025,.075,.125,.175,.225,.275,.325,.375,.425,.475,.55,.65,.75,.9,1.1,1.35,1.75])
MinibooneSxsXS = np.array([76.81,145.7,168.4,170.3,158.9,144.9,132.9,117.2,103.,88.52,71.64,54.25,40.32,27.13,16.20,9.915,5.474])*10**(-40)
MinibooneSxsError = np.array([149.3,118.,97.2,82.16,51.34,39.83,33.86,26.29,24.57,29.75,31.93,32.12,34.42,28.85,22.5,14.07,2.504])*10**(-41)

NomadXData = np.array([4.7,7.7,10.5,13.5,17.8,23.8,29.8,35.8,45.3,71.7])
NomadXS = np.array([9.94,9.42,10.14,8.59,8.43,9.91,8.88,9.70,8.96,9.11])*10**(-39)
NomadError = np.array([1.25,0.72,0.61,0.57,0.40,0.52,0.64,.86,.70,.73])*10**(-39)

MinervaXData = np.array([1.75,2.25,2.75,3.25,3.75,4.25,4.75,5.5,7.,9.,12.5,17.5])
MinervaXS = np.array([3.72,4.67,5.24,5.36,5.16,5.13,5.63,6.15,6.91,6.56,6.74,7.79])*10**(-39)
MinervaError = np.array([8.88,5.58,5.34,4.66,5.50,7.15,8.15,6.91,7.33,7.56,7.62,10.2])*10**(-40)

MinervaDdxsTrue = np.array([
    [4.01e-41, 1.34e-40, 6.70e-40, 1.21e-39 ,1.54e-39 ,1.77e-39 ,2.03e-39 ,1.11e-39 ,5.27e-41 ,0.00e+00 ,0.00e+00 ,0.00e+00],
    [1.16e-41 ,2.06e-40 ,7.47e-40 ,1.32e-39 ,1.91e-39 ,2.19e-39 ,2.41e-39 ,2.10e-39 ,1.17e-39 ,1.01e-40 ,0.00e+00 ,0.00e+00],
    [4.79e-41 ,2.87e-40 ,9.16e-40 ,1.51e-39 ,2.17e-39 ,2.42e-39 ,2.59e-39 ,2.20e-39 ,1.46e-39 ,8.48e-40 ,6.95e-41 ,0.00e+00],
    [6.79e-41 ,2.60e-40 ,7.83e-40 ,1.50e-39 ,1.71e-39 ,2.20e-39 ,2.24e-39 ,1.75e-39 ,1.16e-39 ,6.75e-40 ,1.79e-40 ,0.00e+00],
    [3.99e-41 ,1.73e-40 ,4.77e-40 ,9.82e-40 ,1.15e-39 ,1.28e-39 ,1.32e-39 ,1.05e-39 ,6.75e-40 ,3.86e-40 ,1.33e-40 ,1.15e-41],
    [1.08e-41 ,1.01e-40 ,2.93e-40 ,5.07e-40 ,6.51e-40 ,7.51e-40 ,7.17e-40 ,5.72e-40 ,3.97e-40 ,2.18e-40 ,7.97e-41 ,1.10e-41],
    [1.35e-41 ,7.32e-41 ,1.72e-40 ,2.91e-40 ,3.71e-40 ,4.17e-40 ,4.36e-40 ,3.68e-40 ,2.12e-40 ,1.46e-40 ,6.46e-41 ,1.63e-41],
    [6.17e-42 ,4.23e-41 ,1.22e-40 ,1.78e-40 ,2.49e-40 ,3.07e-40 ,2.62e-40 ,2.41e-40 ,1.61e-40 ,1.07e-40 ,4.68e-41 ,1.38e-41],
    [5.77e-42, 2.68e-41 ,6.90e-41 ,1.14e-40 ,1.55e-40 ,1.61e-40 ,1.57e-40 ,1.38e-40 ,1.19e-40 ,6.33e-41 ,2.47e-41 ,6.87e-42],
    [4.05e-42 ,1.93e-41 ,3.92e-41 ,6.33e-41 ,8.79e-41 ,1.17e-40 ,9.08e-41 ,7.67e-41 ,6.46e-41 ,5.10e-41 ,2.01e-41 ,6.23e-42],
    [1.50e-42 ,9.82e-42 ,1.78e-41 ,3.59e-41 ,5.28e-41 ,6.77e-41 ,6.16e-41 ,4.46e-41 ,3.24e-41 ,2.22e-41 ,1.34e-41 ,3.70e-42],
    [8.51e-43 ,3.88e-42 ,7.44e-42 ,1.42e-41 ,2.13e-41 ,2.89e-41 ,2.72e-41 ,2.05e-41 ,1.79e-41 ,1.35e-41 ,6.77e-42 ,1.82e-42]
    ])

MinervaError = np.transpose(np.array([
    [2.43e-41, 1.78e-41, 2.25e-41, 1.97e-41, 1.51e-41, 6.65e-42, 6.86e-42, 4.24e-42, 2.69e-42, 1.89e-42, 1.19e-42, 7.33e-43],
    [6.27e-41, 5.90e-41, 6.02e-41, 4.51e-41, 3.24e-41, 2.15e-41, 1.61e-41, 9.71e-42, 5.77e-42, 4.93e-42, 2.09e-42, 1.00e-42],
    [1.69e-40, 1.27e-40, 1.26e-40, 9.06e-41, 6.11e-41, 4.00e-41, 2.54e-41, 1.71e-41, 1.01e-41, 6.91e-42, 3.12e-42, 1.44e-42],
    [2.62e-40, 2.15e-40, 2.00e-40, 1.61e-40, 1.13e-40, 6.58e-41, 4.02e-41, 2.40e-41, 1.49e-41, 9.92e-42, 5.50e-42, 2.32e-42],
    [3.44e-40, 2.67e-40, 2.76e-40, 1.85e-40, 1.34e-40, 8.89e-41, 4.94e-41, 3.13e-41, 1.91e-41, 1.27e-41, 7.39e-42, 3.31e-42],
    [3.49e-40, 3.04e-40, 2.88e-40, 2.33e-40, 1.53e-40, 9.99e-41, 5.76e-41, 3.71e-41, 2.02e-41, 1.50e-41, 8.12e-42, 3.93e-42],
    [3.82e-40, 3.34e-40, 2.87e-40, 2.43e-40, 1.82e-40, 9.14e-41, 5.72e-41, 3.29e-41, 1.96e-41, 1.24e-41, 7.53e-42, 3.83e-42],
    [1.98e-40, 2.83e-40, 2.43e-40, 1.99e-40, 1.45e-40, 8.21e-41, 4.76e-41, 2.90e-41, 1.71e-41, 1.09e-41, 6.16e-42, 3.03e-42],
    [2.03e-41, 1.60e-40, 1.75e-40, 1.64e-40, 1.05e-40, 6.18e-41, 3.25e-41, 2.20e-41, 1.61e-41, 9.93e-42, 4.88e-42, 2.92e-42],
    [0.00e+00, 2.82e-41, 1.27e-40, 1.21e-40, 7.30e-41, 4.34e-41, 2.81e-41, 1.91e-41, 1.19e-41, 9.14e-42, 4.03e-42, 2.52e-42],
    [0.00e+00, 0.00e+00, 1.89e-41, 4.27e-41, 3.34e-41, 2.01e-41, 1.48e-41, 1.22e-41, 6.56e-42, 5.23e-42, 3.00e-42, 2.01e-42],
    [0.00e+00, 0.00e+00, 0.00e+00, 0.00e+00, 5.33e-42, 5.47e-42, 7.22e-42, 5.82e-42, 3.46e-42, 3.22e-42, 1.72e-42, 1.13e-42]
    ]))

MinibooneDdxs = np.array([[289.2,348.7,418.3,497.6,600.2,692.3,778.1,557.5,891.8,919.3,1003.0,1007.0,992.3,910.2,871.9,765.6,681.9,553.6,401.9,190.0],
    [15.18,25.82,44.84,85.80,135.2,202.2,292.1,401.6,503.3,686.6,813.1,970.2,1148.0,1157.0,1279.0,1233.0,1222.0,981.1,780.6,326.5],
    [0.0,0.0,0.0,0.164,3.624,17.42,33.69,79.10,134.7,272.3,404.9,547.9,850.0,1054.0,1301.0,1495.0,1546.0,1501.0,1258.0,539.2],
    [0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.947,10.92,40.63,92.93,201.5,394.4,628.8,989.9,1289.0,1738.0,1884.0,1714.0,901.8],
    [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.071,2.176,11.63,36.51,105.0,231.0,469.1,872.2,1365.0,1847.0,2084.0,1288.0],
    [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.844,16.96,57.95,147.4,392.3,909.6,1629.0,2100.0,1633.0],
    [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,10.93,10.69,45.02,157.5,526.7,1203.0,2035.0,1857.0],
    [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,12.44,49.23,222.8,723.8,1620.0,1874.0],
    [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.012,9.241,81.65,359.8,1118.0,1803.0],
    [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.229,35.61,156.2,783.6,1636.0],
    [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,4.162,11.36,66.90,451.9,1354.0],
    [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.131,26.87,239.4,1047.0],
    [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.527,116.4,794.0],
    [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,19.50,73.07,687.9],
    [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,41.67,494.3],
    [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,36.55,372.5],
    [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,278.3],
    [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,227.4]])*10**(-41)

MinibooneError = np.array([
    [349.8,339.7,408.8,450.2,520.8,596.9,698.0,922.7,917.7,980.4,1090.,1351.,1293.,1267.,1477.,1380.,1435.,1134.,905.0,684.3],
    [63.32,107.6,184.4,236.6,360.7,482.6,553.3,586.4,746.9,783.6,1078.,1246.,1105.,1154.,1273.,1372.,1455.,1557.,1352.,1071.],
    [0.,0.,0.,31.22,34.63,57.73,135.3,215.6,337.5,515.7,695.5,1048.,1041.,1155.,1365.,1434.,1581.,1781.,1754.,1778.],
    [0.,0.,0.,0.,0.,0.,0.,55.88,50.92,114.6,238.2,415.1,742.5,965.3,1369.,1370.,1648.,1845.,2009.,1664.],
    [0.,0.,0.,0.,0.,0.,0.,0.,3.422,20.92,45.96,114.3,250.6,574.7,1021.,1201.,1791.,1769.,2222.,1883.],
    [0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,41.02,77.66,149.2,475.5,870.2,1513.,1823.,2334.,2193.],
    [0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,110.3,53.26,161.6,432.3,1068.,1873.,2711.,2558.],
    [0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,55.58,162.2,598.2,1464.,2870.,3037.],
    [0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,16.32,71.88,267.2,963.8,2454.,3390.],
    [0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,49.10,155.1,601.6,1880.,3320.],
    [0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,54.01,69.28,339.6,1391.,3037.],
    [0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,89.01,184.1,1036.,3110.],
    [0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,170.1,758.7,2942.],
    [0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,230.6,544.3,2424.],
    [0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,505.5,2586.],
    [0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,359.6,2653.],
    [0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,3254.],
    [0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,3838.]])*10**(-42)




